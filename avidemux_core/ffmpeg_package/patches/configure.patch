--- configure.orig	2024-04-05 01:22:59.000000000 +0200
+++ configure	2024-08-10 22:15:24.939016180 +0200
@@ -387,9 +387,7 @@
   --windres=WINDRES        use windows resource compiler WINDRES [$windres_default]
   --x86asmexe=EXE          use nasm-compatible assembler EXE [$x86asmexe_default]
   --cc=CC                  use C compiler CC [$cc_default]
-  --stdc=STDC              use C standard STDC [$stdc_default]
   --cxx=CXX                use C compiler CXX [$cxx_default]
-  --stdcxx=STDCXX          use C standard STDCXX [$stdcxx_default]
   --objcc=OCC              use ObjC compiler OCC [$cc_default]
   --dep-cc=DEPCC           use dependency generator DEPCC [$cc_default]
   --nvcc=NVCC              use Nvidia CUDA compiler NVCC or clang [$nvcc_default]
@@ -1456,33 +1454,6 @@
 EOF
 }
 
-check_cflags_cc(){
-    log check_cflags_cc "$@"
-    flags=$1
-    test_cflags_cc "$@" && add_cflags $flags
-}
-
-test_cxxflags_cc(){
-    log test_cxxflags_cc "$@"
-    flags=$1
-    header=$2
-    condition=$3
-    shift 3
-    set -- $($cflags_filter "$flags")
-    test_cxx "$@" <<EOF
-#include <$header>
-#if !($condition)
-#error "unsatisfied condition: $condition"
-#endif
-EOF
-}
-
-check_cxxflags_cc(){
-    log check_cxxflags_cc "$@"
-    flags=$1
-    test_cxxflags_cc "$@" && add_cxxflags $flags
-}
-
 check_lib(){
     log check_lib "$@"
     name="$1"
@@ -1724,27 +1695,6 @@
 EOF
 }
 
-test_host_cflags_cc(){
-    log test_host_cflags_cc "$@"
-    flags=$1
-    header=$2
-    condition=$3
-    shift 3
-    set -- $($host_cflags_filter "$flags")
-    test_host_cc "$@" <<EOF
-#include <$header>
-#if !($condition)
-#error "unsatisfied condition: $condition"
-#endif
-EOF
-}
-
-check_host_cflags_cc(){
-    log check_host_cflags_cc "$@"
-    flags=$1
-    test_host_cflags_cc "$@" && add_host_cflags $flags
-}
-
 test_host_cpp_condition(){
     log test_host_cpp_condition "$@"
     header=$1
@@ -2702,8 +2652,6 @@
     random_seed
     ranlib
     samples
-    stdc
-    stdcxx
     strip
     sws_max_filter_size
     sysinclude
@@ -4034,8 +3982,6 @@
 # toolchain
 ar_default="ar"
 cc_default="gcc"
-stdc_default="c17"
-stdcxx_default="c++11"
 cxx_default="g++"
 host_cc_default="gcc"
 doxygen_default="doxygen"
@@ -4643,7 +4589,7 @@
 fi
 
 set_default arch cc cxx doxygen pkg_config ranlib strip sysinclude \
-    target_exec x86asmexe metalcc metallib stdc stdcxx
+    target_exec x86asmexe metalcc metallib
 enabled cross_compile || host_cc_default=$cc
 set_default host_cc
 
@@ -4768,7 +4714,7 @@
             # generic catch all at the bottom will print the original flag.
             -Wall)                ;;
             -Wextra)              ;;
-            -std=c*)              echo /std:${flag#-std=};;
+            -std=c*)              ;;
             # Common flags
             -fomit-frame-pointer) ;;
             -g)                   echo -Z7 ;;
@@ -4813,7 +4759,7 @@
             # Despite what Intel's documentation says -Wall, which is supported
             # on Windows, does enable remarks so disable them here.
             -Wall)                echo $flag -Qdiag-disable:remark ;;
-            -std=$stdc)           echo -Qstd=$stdc ;;
+            -std=c17)             echo -Qstd=c17 ;;
             -flto*)               echo -ipo ;;
         esac
     done
@@ -4861,7 +4807,7 @@
                     athlon*)                   echo -xarch=pentium_proa  ;;
                 esac
                 ;;
-            -std=$stdc)           echo -x$stdc            ;;
+            -std=c17)             echo -xc17              ;;
             -fomit-frame-pointer) echo -xregs=frameptr    ;;
             -fPIC)                echo -KPIC -xcode=pic32 ;;
             -W*,*)                echo $flag              ;;
@@ -4950,8 +4896,8 @@
         _type=suncc
         _ident=$($_cc -V 2>&1 | head -n1 | cut -d' ' -f 2-)
         _DEPCMD='$(DEP$(1)) $(DEP$(1)FLAGS) $($(1)DEP_FLAGS) $< | sed -e "1s,^.*: ,$@: ," -e "\$$!s,\$$, \\\," -e "1!s,^.*: , ," > $(@:.o=.d)'
-        _DEPFLAGS='-xM1 -x$stdc'
-        _ldflags='-std=$stdc'
+        _DEPFLAGS='-xM1 -xc17'
+        _ldflags='-std=c17'
         _cflags_speed='-O5'
         _cflags_size='-O5 -xspace'
         _flags_filter=suncc_flags
@@ -5580,15 +5526,15 @@
     die "C compiler test failed."
 fi
 
-add_cppflags -D_ISOC11_SOURCE
+add_cppflags -D_ISOC17_SOURCE
 add_cxxflags -D__STDC_CONSTANT_MACROS
-check_cxxflags_cc -std=$stdcxx ctype.h "__cplusplus >= 201103L" ||
-    { check_cxxflags -std=c++11 && stdcxx="c++11" || { check_cxxflags -std=c++0x && stdcxx="c++0x"; }; }
+check_cxxflags -std=c++11 || check_cxxflags -std=c++0x
 
 # some compilers silently accept -std=c11, so we also need to check that the
 # version macro is defined properly
-check_cflags_cc -std=$stdc ctype.h "__STDC_VERSION__ >= 201112L" ||
-    { check_cflags_cc -std=c11 ctype.h "__STDC_VERSION__ >= 201112L" && stdc="c11" || die "Compiler lacks C11 support"; }
+test_cflags_cc -std=c11 ctype.h "__STDC_VERSION__ >= 201112L" &&
+    add_cflags -std=c11 ||
+    check_cflags -std=c17
 
 test_cc <<EOF || die "Compiler lacks support for C11 static assertions"
 #include <assert.h>
@@ -5606,10 +5552,8 @@
 check_cppflags -D_FILE_OFFSET_BITS=64
 check_cppflags -D_LARGEFILE_SOURCE
 
-add_host_cppflags -D_ISOC11_SOURCE
-check_host_cflags_cc -std=$stdc ctype.h "__STDC_VERSION__ >= 201112L" ||
-    check_host_cflags_cc -std=c11 ctype.h "__STDC_VERSION__ >= 201112L" || die "Host compiler lacks C11 support"
-
+add_host_cppflags -D_ISOC17_SOURCE
+check_host_cflags -std=c17
 check_host_cflags -Wall
 check_host_cflags $host_cflags_speed
 
